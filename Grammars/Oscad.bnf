{
  parserClass="com.oscadplugin.parser.OscadParser"
  stubParserClass="com.oscadplugin.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Oscad"
  psiImplClassSuffix="Impl"
  psiPackage="com.oscadplugin.psi"
  psiImplPackage="com.oscadplugin.psi.impl"
  psiImplUtilClass="com.oscadplugin.psi.impl.OscadPsiImplUtils"

  elementTypeHolderClass="com.oscadplugin.psi.OscadTypes"
  elementTypeClass="com.oscadplugin.psi.OscadElementType"
  tokenTypeClass="com.oscadplugin.psi.OscadTokenType"

  name(".*expr")='expression'
  extends(".*expr")=expr
}

oscadFile ::= item_*

private item_ ::=
    private COMMENT |
    use_or_include |
    module_declaration |
    function_declaration |
    statement

use_or_include ::=
    IMPORT LEFT_ANGLE FILENAME RIGHT_ANGLE

statement ::=
    innerstatement |
    LEFT_BRACE innerstatement + RIGHT_BRACE

innerstatement ::=
    assignment SEMICOLON |
    ifelse_statement |
    for_loop |
    assign_statement | renderable_item

renderable_item ::=
    MODIFIER? transformed_item

transformed_item ::=
    transform* transformable_item |
    transform+ LEFT_BRACE renderable_item+ RIGHT_BRACE

transformable_item ::=
    CSG LEFT_PAREN RIGHT_PAREN LEFT_BRACE innerstatement+ RIGHT_BRACE |
    module_instantiation

transform ::=
    TRANSFORM_KEY LEFT_PAREN arguments_call RIGHT_PAREN

assign_statement ::=
    ASSIGN LEFT_PAREN assignment ( COMMA assignment)* RIGHT_PAREN

assignment ::= ID EQUALS expr

expr ::=
    factor plus_expr * |
    vector

left plus_expr ::= plus_op factor
private plus_op ::= PLUS | MINUS
private factor ::= primary mul_expr *
left mul_expr  ::= mul_op primary
private mul_op ::= STAR | SLASH | PERCENT
private primary ::= primary_inner factorial_expr ?
left factorial_expr ::= '!'
private primary_inner ::= function_instantiation | literal_expr | ref_expr | paren_expr | vector
paren_expr ::= LEFT_PAREN expr RIGHT_PAREN {pin=1}
ref_expr ::= unary_op?ID (LEFT_SQUARE expr RIGHT_SQUARE)?
literal_expr ::= unary_op? NUMBER | STRING | float

unary_op ::=
    PLUS | MINUS


module_declaration ::=
    MODULE ID LEFT_PAREN arguments_decl  RIGHT_PAREN statement {methods=[getModuleName getArguments]}

function_declaration ::=
    FUNCTION ID LEFT_PAREN arguments_decl RIGHT_PAREN EQUALS expr SEMICOLON

arguments_decl ::=
    argument? (COMMA argument?)* {methods=[getArguments]}

argument ::=
    ID  (EQUALS expr) ? {methods=[getArgument]}

arguments_call ::=
    argument_call ? (COMMA argument_call) *

argument_call ::= ((parName EQUALS)? parVal)?
parName ::= ID
parVal ::= expr

optional_commas ::=
	COMMA*

for_loop ::=
    FOR LEFT_PAREN iterator (COMMA iterator)* RIGHT_PAREN statement

iterator ::=
    ID EQUALS (range_or_vector | ID)

range_or_vector ::=range | vector

range ::=  LEFT_SQUARE expr COLON expr (COLON expr)? RIGHT_SQUARE
vector ::=  LEFT_SQUARE expr (COMMA expr)+ RIGHT_SQUARE

if_statement ::=
	IF LEFT_PAREN compare_expression RIGHT_PAREN statement

ifelse_statement ::=
	if_statement ( ELSE statement ) ?

compare_expression ::=
    expr (COMPARATOR expr)?

module_instantiation ::=
	ID LEFT_PAREN arguments_call RIGHT_PAREN SEMICOLON {methods=[getArguments getModuleName]}

function_instantiation ::= ID LEFT_PAREN arguments_call RIGHT_PAREN


